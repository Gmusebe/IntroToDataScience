set.seed(1234)
model <- train(data = Train.data, Survived~., method = "rf",
trControl = trainControl("cv", number = 10),
importance = TRUE
)
ForestTrain <- data.combined[which(data.combined$Survived != "None"),]
training.samples <- ForestTrain$Survived %>% createDataPartition(p = 0.8, list = FALSE)
Train.data  <- ForestTrain[training.samples, ]
Test.data <- ForestTrain[-training.samples, ]
Train.data <- na.omit(Train.data)
set.seed(1234)
model <- train(Survived~.,data = Train.data, method = "rf",
trControl = trainControl("cv", number = 10),
importance = TRUE
)
set.seed(1234)
model <- train(Survived~.,data = Train.data[, c("Pclass", "Title", "SibSp", "Parch")], method = "rf",
trControl = trainControl("cv", number = 10),
importance = TRUE
)
set.seed(1234)
model <- train(Survived~.,data = Train.data[, c("Pclass", "Title", "SibSp", "Parch", "Survived")], method = "rf",
trControl = trainControl("cv", number = 10),
importance = TRUE
)
ForestTrain <- data.combined[which(data.combined$Survived != "None"),]
ForestTrain$Survived <- -factor(ForestTrain$Survived)
ForestTrain <- data.combined[which(data.combined$Survived != "None"),]
View(ForestTrain)
ForestTrain <- data.combined[which(data.combined$Survived != "None"),]
ForestTrain <- subset(ForestTrain, select = -c(PassengerId, Name, Sex, Age, ticket.first.char, Ticket, Fare, cabin.first.char, Cabin, Embarked, cabin,cabin.multiple))
head(model.matrix(Survived ~., data = ForestTrain))
View(ForestTrain)
training.samples <- ForestTrain$Survived %>% createDataPartition(p = 0.8, list = FALSE)
ForestTrain <- data.combined[which(data.combined$Survived != "None"),]
ForestTrain <- subset(ForestTrain, select = -c(PassengerId, Name, Sex, Age, ticket.first.char, Ticket, Fare, cabin.first.char, Cabin, Embarked, cabin,cabin.multiple))
######
View(ForestTrain)
head(model.matrix((Survived~., data = ForestTrain)))
head(model.matrix(Survived~., data = ForestTrain))
dummies <- dummyVars(Survived~., data = ForestTrain)
View(dummies)
training.samples <- dummies$Survived %>% createDataPartition(p = 0.8, list = FALSE)
tr < - predict(dummies, newdata = ForestTrain)
tr <- predict(dummies, newdata = ForestTrain)
View(ForestTrain)
predictors <- c("Pclass", "Title","SibSp","Parch", "family.size")
response <- c("Survived")
library(caret)
ForestTrain_dummy <- dummyVars(~Pclass + Title + SibSp + family.size, ForestTrain)
View(ForestTrain_dummy)
ForetTrain_dummy_df <- as.data.frame(predict(ForestTrain_dummy, ForestTrain))
View(ForetTrain_dummy_df)
ForestTrain <- data.combined[which(data.combined$Survived != "None"),]
ForestTrain <- subset(ForestTrain, select = -c(PassengerId, Name, Sex, Age, ticket.first.char, Ticket, Fare, cabin.first.char, Cabin, Embarked, cabin,cabin.multiple))
######
predictors <- c("Pclass", "Title","SibSp","Parch", "family.size")
response <- c("Survived")
library(caret)
ForestTrain_dummy <- dummyVars(~Pclass + Title + SibSp + family.size, ForestTrain)
ForestTrain_dummy_df <- as.data.frame(predict(ForestTrain_dummy, ForestTrain))
ForestTrain_dummy_df <- data.frame(ForestTrain[c("Pclass", "Title","SibSp","Parch", "family.size")],
ForestTrain_dummy_df,
ForestTrain["Survived"])
View(ForestTrain_dummy_df)
RandomF <- train(Survived~., data = ForestTrain_dummy_df)
RandomF <- randomForest(Survived~., data = ForestTrain_dummy_df, mtry = 14)
ForestTrain <- droplevels(data.combined[data.combined$Survived == "None",]
ForestTrain <- droplevels(data.combined[data.combined$Survived == "None",])
View(ForestTrain)
View(Forest.data)
ForestTrain <- droplevels(ForestTrain[ForestTrain$Survived=="None",])
View(ForestTrain)
ForestTrain <- data.combined[which(data.combined$Survived != "None"),]
ForestTrain <- droplevels(data.combined[data.combined$Survived=="None",])
View(ForestTrain)
ForestTest <- droplevels(data.combined[data.combined$Survived=="None",])
View(ForestTest)
ForestTrain <- droplevels(data.combined[data.combined$Survived!="None",])
View(ForestTrain)
ForestTrain <- subset(ForestTrain, select = -c(PassengerId, Name, Sex, Age, ticket.first.char, Ticket, Fare, cabin.first.char, Cabin, Embarked, cabin,cabin.multiple))
View(ForestTrain)
ForestTrain <- na.omit(ForestTrain)
predictors <- c("Pclass", "Title","SibSp","Parch", "family.size")
response <- c("Survived")
ForestTrain_dummy <- dummyVars(~Pclass + Title + SibSp + family.size, ForestTrain)
ForestTrain_dummy_df <- as.data.frame(predict(ForestTrain_dummy, ForestTrain))
ForestTrain_dummy_df <- data.frame(ForestTrain[c("Pclass", "Title","SibSp","Parch", "family.size")],
ForestTrain_dummy_df,
ForestTrain["Survived"])
ForestTest <- droplevels(data.combined[data.combined$Survived=="None",])
ForestTrain <- droplevels(data.combined[data.combined$Survived!="None",])
ForestTrain <- subset(ForestTrain, select = -c(PassengerId, Name, Sex, Age, ticket.first.char, Ticket, Fare, cabin.first.char, Cabin, Embarked, cabin,cabin.multiple))
ForestTrain <- na.omit(ForestTrain)
training.samples <- ForestTrain$Survived %>% createDataPartition(p = 0.8, list = FALSE)
View(training.samples)
Train.data  <- ForestTrain[training.samples, ]
Test.data <- ForestTrain[-training.samples, ]
set.seed(1234)
View(Train.data)
model <- train(Survived~.,data = Train.data, method = "rf",
trControl = trainControl("cv", number = 10),
importance = TRUE
)
model$finalModel
rf.train.2 <- ForestTrain[, c("Pclass", "Title", "SibSp", "family.size")]
rf.label <- ForestTrain$Survived
set.seed(1234)
rf.2 <- randomForest(x = rf.train.2, y = rf.label, importance = TRUE, ntree = 1000)
rf.2
varImpPlot(rf.2)
rf.train.1 <- data.combined[1:891, c("Pclass", "Title", "SibSp", "Parch")]
rf.label <- as.factor(train$Survived)
set.seed(1234)
rf.1 <- randomForest(x = rf.train.1, y = rf.label, importance = TRUE, ntree = 1000)
rf.1
varImpPlot(rf.1)
ForestTest <- droplevels(data.combined[data.combined$Survived=="None",])
ForestTrain <- droplevels(data.combined[data.combined$Survived!="None",])
ForestTrain <- subset(ForestTrain, select = -c(PassengerId, Name, Sex, Age, ticket.first.char, Ticket, Fare, cabin.first.char, Cabin, Embarked, cabin,cabin.multiple))
ForestTrain <- na.omit(ForestTrain)
predictors <- c("Pclass", "Title","SibSp","Parch", "family.size")
response <- c("Survived")
library(caret)
ForestTrain_dummy <- dummyVars(~Pclass + Title + SibSp + family.size, ForestTrain)
ForestTrain_dummy_df <- as.data.frame(predict(ForestTrain_dummy, ForestTrain))
ForestTrain_dummy_df <- data.frame(ForestTrain[c("Pclass", "Title","SibSp","Parch", "family.size")],
ForestTrain_dummy_df,
ForestTrain["Survived"])
Rf <- train(Survived~., data = ForestTrain)
Rf
Rf <- randomForest(Survived~., data = ForestTrain)
Rf
ForestTest <- droplevels(data.combined[data.combined$Survived=="None",])
ForestTrain <- droplevels(data.combined[data.combined$Survived!="None",])
ForestTrain <- subset(ForestTrain, select = -c(PassengerId, Name, Sex, Age, ticket.first.char, Ticket, Fare, cabin.first.char, Cabin, Embarked, cabin,cabin.multiple))
ForestTrain <- na.omit(ForestTrain)
######
predictors <- c("Pclass", "Title","SibSp","Parch", "family.size")
response <- c("Survived")
library(caret)
ForestTrain_dummy <- dummyVars(~Pclass + Title + SibSp + family.size, ForestTrain)
ForestTrain_dummy_df <- as.data.frame(predict(ForestTrain_dummy, ForestTrain))
ForestTrain_dummy_df <- data.frame(ForestTrain[c("Pclass", "Title","SibSp","Parch", "family.size")],
ForestTrain_dummy_df,
ForestTrain["Survived"])
Rf <- train(Survived~., data = ForestTrain)
Rf
Rf <- randomForest(Survived~., data = ForestTrain, mtry = 14)
Rf <- randomForest(Survived~., data = ForestTrain)
Rf
Rf
Rf <- randomForest(Survived~., data = ForestTrain_dummy_df, mtry = 14)
Rf
library(randomForest)
ForestTrain <- subset(ForestTrain, select = -c(PassengerId, Name, Sex, Age, ticket.first.char, Ticket, Fare, cabin.first.char, Cabin, Embarked, cabin,cabin.multiple))
ForestTrain <- na.omit(ForestTrain)
ForestTest <- droplevels(data.combined[data.combined$Survived=="None",])
ForestTrain <- droplevels(data.combined[data.combined$Survived!="None",])
# Train and Test data
training.samples <- ForestTrain$Survived %>% createDataPartition(p = 0.8, list = FALSE)
Train.data  <- ForestTrain[training.samples, ]
Test.data <- ForestTrain[-training.samples, ]
set.seed(1234)
model <- train(Survived~.,data = Train.data, method = "rf",
trControl = trainControl("cv", number = 10),
importance = TRUE
)
ForestTest <- droplevels(data.combined[data.combined$Survived=="None",])
ForestTrain <- droplevels(data.combined[data.combined$Survived!="None",])
ForestTrain <- subset(ForestTrain, select = -c(PassengerId, Name, Sex, Age, ticket.first.char, Ticket, Fare, cabin.first.char, Cabin, Embarked, cabin,cabin.multiple))
ForestTrain <- na.omit(ForestTrain)
# Train and Test data
training.samples <- ForestTrain$Survived %>% createDataPartition(p = 0.8, list = FALSE)
Train.data  <- ForestTrain[training.samples, ]
Test.data <- ForestTrain[-training.samples, ]
set.seed(1234)
model <- train(Survived~.,data = Train.data, method = "rf",
trControl = trainControl("cv", number = 10),
importance = TRUE
)
model$finalModel
ForestTest <- droplevels(data.combined[data.combined$Survived=="None",])
ForestTrain <- droplevels(data.combined[data.combined$Survived!="None",])
ForestTrain <- subset(ForestTrain, select = -c(PassengerId, Name, Sex, Age, ticket.first.char, Ticket, Fare, cabin.first.char, Cabin, Embarked, cabin,cabin.multiple))
ForestTrain <- na.omit(ForestTrain)
######
predictors <- c("Pclass", "Title","SibSp","Parch", "family.size")
response <- c("Survived")
library(caret)
ForestTrain_dummy <- dummyVars(~Pclass + Title + SibSp + family.size, ForestTrain)
ForestTrain_dummy_df <- as.data.frame(predict(ForestTrain_dummy, ForestTrain))
ForestTrain_dummy_df <- data.frame(ForestTrain[c("Pclass", "Title","SibSp","Parch", "family.size")],
ForestTrain_dummy_df,
ForestTrain["Survived"])
model <- train(Survived~.,data = ForestTrain, method = "rf",
trControl = trainControl("cv", number = 10),
importance = TRUE)
model$finalModel
ForestTest <- droplevels(data.combined[data.combined$Survived=="None",])
ForestTrain <- droplevels(data.combined[data.combined$Survived!="None",])
ForestTrain <- subset(ForestTrain, select = -c(PassengerId, Name, Sex, Age, ticket.first.char, Ticket, Fare, cabin.first.char, Cabin, Embarked, cabin,cabin.multiple))
ForestTrain <- na.omit(ForestTrain)
View(ForestTrain)
?train
setwd("D:/IntroToDataScience")
#
# Copyright 2016 Dave Langer
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
#
# This R source code file corresponds to video 4 of the YouTube series
# "Introduction to Data Science with R" located at the following URL:
#     https://youtu.be/UHJH7w9q4Lc
#
# Load raw data
train <- read.csv("train.csv", header = TRUE)
test <- read.csv("test.csv", header = TRUE)
# Add a "Survived" variable to the test set to allow for combining data sets
library(tibble)
test <- add_column(test, data.frame(Survived = rep("None", nrow(test))), .after = 1)
# Combine data sets
data.combined <- rbind(train, test)
# A bit about R data types (e.g., factors)
str(data.combined)
data.combined$Survived <- as.factor(data.combined$Survived)
data.combined$Pclass <- as.factor(data.combined$Pclass)
data.combined$Name <- as.factor(data.combined$Name)
# Check  for the missing data
visdat::vis_dat(data.combined)
#  Check the measure of data missing
naniar::vis_miss(data.combined)
# Take a look at gross survival rates
library(epiDisplay)
tab1(data.combined$Survived, col=c("chocolate","brown1","brown4"))
# Distribution across classes
tab1(data.combined$Pclass, col=c("chocolate","brown1","brown4"))
# Load up ggplot2 package to use for visualizations
library(ggplot2)
# Hypothesis - Rich folks survived at a higer rate
train$Pclass <- as.factor(train$Pclass)
ggplot(train, aes(x = Pclass, fill = factor(Survived))) +
geom_bar() +
xlab("Pclass") +
ylab("Total Count") +
labs(fill = "Survived")
# Examine the first few names in the training data set
train$Name <- as.character(train$Name)
head(train$Name)
# How many unique names are there across both train & test?
length(unique(data.combined$Name))
# Two duplicate names, take a closer look
# First, get the duplicate names and store them as a vector
dup.names <- as.character(data.combined[which(duplicated(data.combined$Name)), "Name"])
# There are no duplicates in the data
# What is up with the 'Miss.' and 'Mr.' thing?
# Expand upon the realtionship between `Survived` and `Pclass` by adding the new `Title` variable to the
# data set and then explore a potential 3-dimensional relationship.
library(stringr)
Title <- (str_extract(string = data.combined$Name, pattern = "(Mr|Master|Mrs|Miss)\\."))
data.combined <- add_column(data.combined, Title, .after = 3)
data.combined$Title[which(is.na(data.combined$Title))] <- "Other"
data.combined$Title <- as.factor(data.combined$Title)
# Any correlation with other variables (e.g., sibsp[Siblings/Spouse])?
misses <- data.combined[which(str_detect(data.combined$Name, "Miss.")),]
misses[1:5,]
# Hypothesis - Name titles correlate with age
mrses <- data.combined[which(data.combined$Title == "Mrs."), ]
mrses[1:5,]
# Check out males to see if pattern continues
males <- data.combined[which(data.combined$Sex == "male"), ]
males[1:5,]
# Since we only have survived lables for the train set, only use the
# first 891 rows
ggplot(data.combined[1:891,], aes(x = Title, fill = Survived)) +
geom_bar() +
facet_wrap(~Pclass) +
ggtitle("Pclass") +
xlab("Title") +
ylab("Total Count") +
labs(fill = "Survived")
# What's the distribution of females to males across train & test?
tab1(data.combined$Sex, col=c("chocolate","brown1"))
# Visualize the 3-way relationship of sex, pclass, and survival, compare to analysis of title
ggplot(data.combined[1:891,], aes(x = Sex, fill = Survived)) +
geom_bar() +
facet_wrap(~Pclass) +
ggtitle("Pclass") +
xlab("Sex") +
ylab("Total Count") +
labs(fill = "Survived")
# Survial rates deccreased across the Pclass among all the genders.
# OK, age and sex seem pretty important as derived from analysis of title, let's take a closer
# look at the distibutions of age over entire data set
summary(data.combined$Age)
summary(data.combined[1:891,"Age"])
# Most of the age data is missing in he train data
# Just to be thorough, take a look at survival rates broken out by sex, pclass, and age
ggplot(data.combined[1:891,], aes(x = Age, fill = Survived)) +
facet_wrap(~Sex + Pclass) +
geom_histogram(binwidth = 10) +
xlab("Age") +
ylab("Total Count")
# There is a decrease in survival rates by gender across the Pclass
# Validate that "Master." is a good proxy for male children
boys <- data.combined[which(data.combined$Title == "Master."),]
summary(boys$Age)
# We know that "Miss." is more complicated, let's examine further
misses <- data.combined[which(data.combined$Title == "Miss."),]
summary(misses$Age)
# We have a mixture of children and adults, 25% being less than 15 years.
# The miss's age data seems to be skewed to the right. Meaning most miss's are adults.
ggplot(misses[misses$Survived != "None",], aes(x = Age, fill = Survived)) +
facet_wrap(~Pclass) +
geom_histogram(binwidth = 5) +
ggtitle("Age for 'Miss.' by Pclass") +
xlab("Age") +
ylab("Total Count")
# OK, appears female children may have different survival rate,
# could be a candidate for feature engineering later
misses.alone <- misses[which(misses$SibSp == 0 & misses$Parch == 0),]
summary(misses.alone$Age)
length(which(misses.alone$Age <= 14.5))
# Move on to the sibsp variable, summarize the variable
summary(data.combined$SibSp)
# Can we treat as a factor?
length(unique(data.combined$SibSp))
data.combined$SibSp <- as.factor(data.combined$SibSp)
# We believe title is predictive. Visualize survival reates by sibsp, pclass, and title
ggplot(data.combined[1:891,], aes(x = SibSp, fill = Survived)) +
geom_bar() +
facet_wrap(~ Pclass + Title) +
ggtitle("Pclass, Title") +
xlab("SibSp") +
ylab("Total Count") +
ylim(0,300) +
labs(fill = "Survived")
# Treat the parch vaiable as a factor and visualize
data.combined$Parch <- as.factor(data.combined$Parch)
ggplot(data.combined[1:891,], aes(x = Parch, fill = Survived)) +
geom_bar() +
facet_wrap(~Pclass + Title) +
ggtitle("Pclass, Title") +
xlab("ParCh") +
ylab("Total Count") +
ylim(0,300) +
labs(fill = "Survived")
# Let's try some feature engineering. What about creating a family size feature?
temp.sibsp <- c(train$SibSp, test$SibSp)
temp.parch <- c(train$Parch, test$Parch)
family.size <- as.factor(temp.sibsp + temp.parch + 1)
data.combined <- add_column(data.combined, family.size, .after = 9)
# Visualize it to see if it is predictive
ggplot(data.combined[1:891,], aes(x = family.size, fill = Survived)) +
geom_bar() +
facet_wrap(~Pclass + Title) +
ggtitle("Pclass, Title") +
xlab("family.size") +
ylab("Total Count") +
ylim(0,300) +
labs(fill = "Survived")
# The greater the family size the less the survival rate.
# Take a look at the ticket variable
str(data.combined$Ticket)
# There's no immediately apparent structure in the data, let's see if we can find some.
# We'll start with taking a look at just the first char for each
ticket.first.char <- ifelse(data.combined$Ticket == "", " ", substr(data.combined$Ticket, 1, 1))
unique(ticket.first.char)
# OK, we can make a factor for analysis purposes and visualize
data.combined <- add_column(data.combined, ticket.first.char, .after = 10)
# First, a high-level plot of the data
ggplot(data.combined[1:891,], aes(x = ticket.first.char, fill = Survived)) +
geom_bar() +
ggtitle("Survivability by ticket.first.char") +
xlab("ticket.first.char") +
ylab("Total Count") +
ylim(0,350) +
labs(fill = "Survived")
# Ticket seems like it might be predictive, drill down a bit
ggplot(data.combined[1:891,], aes(x = ticket.first.char, fill = Survived)) +
geom_bar() +
facet_wrap(~Pclass) +
ggtitle("Pclass") +
xlab("ticket.first.char") +
ylab("Total Count") +
ylim(0,300) +
labs(fill = "Survived")
# Lastly, see if we get a pattern when using combination of pclass & title
ggplot(data.combined[1:891,], aes(x = ticket.first.char, fill = Survived)) +
geom_bar() +
facet_wrap(~Pclass + Title) +
ggtitle("Pclass, Title") +
xlab("ticket.first.char") +
ylab("Total Count") +
ylim(0,200) +
labs(fill = "Survived")
# There is no solid structure decribing the predictability of survival w.r.t ticketing.
# Next up - the fares Titanic passengers paid
summary(data.combined$Fare)
length(unique(data.combined$Fare))
# Can't make fare a factor, treat as numeric & visualize with histogram
ggplot(data.combined, aes(x = Fare)) +
geom_histogram(binwidth = 5) +
ggtitle("Combined Fare Distribution") +
xlab("Fare") +
ylab("Total Count") +
ylim(0,200)
# Let's check to see if fare has predictive power
ggplot(data.combined[1:891,], aes(x = Fare, fill = Survived)) +
geom_histogram(binwidth = 5) +
facet_wrap(~Pclass + Title) +
ggtitle("Pclass, Title") +
xlab("fare") +
ylab("Total Count") +
ylim(0,50) +
labs(fill = "Survived")
# There is no solid structure decribing the predictability of survival w.r.t fare.
# Analysis of the cabin variable
str(data.combined$Cabin)
data.combined$Cabin[1:100]
# Replace empty cabins with a "U"
data.combined[which(data.combined$Cabin == ""), "cabin"] <- "U"
data.combined$Cabin[1:100]
# Take a look at just the first char as a factor
cabin.first.char <- as.factor(substr(data.combined$Cabin, 1, 1))
str(cabin.first.char)
levels(cabin.first.char)
# Add to combined data set and plot
data.combined <- add_column(data.combined, cabin.first.char, .after = 13)
# High level plot
ggplot(data.combined[1:891,], aes(x = cabin.first.char, fill = Survived)) +
geom_bar() +
ggtitle("Survivability by cabin.first.char") +
xlab("cabin.first.char") +
ylab("Total Count") +
ylim(0,750) +
labs(fill = "Survived")
# Could have some predictive power, drill in
ggplot(data.combined[1:891,], aes(x = cabin.first.char, fill = Survived)) +
geom_bar() +
facet_wrap(~Pclass) +
ggtitle("Survivability by cabin.first.char") +
xlab("Pclass") +
ylab("Total Count") +
ylim(0,500) +
labs(fill = "Survived")
# Does this feature improve upon pclass + title?
ggplot(data.combined[1:891,], aes(x = cabin.first.char, fill = Survived)) +
geom_bar() +
facet_wrap(~Pclass + Title) +
ggtitle("Pclass, Title") +
xlab("cabin.first.char") +
ylab("Total Count") +
ylim(0,500) +
labs(fill = "Survived")
# What about folks with multiple cabins?
data.combined$cabin.multiple <- as.factor(ifelse(str_detect(data.combined$Cabin, " "), "Y", "N"))
ggplot(data.combined[1:891,], aes(x = cabin.multiple, fill = Survived)) +
geom_bar() +
facet_wrap(~Pclass + Title) +
ggtitle("Pclass, Title") +
xlab("cabin.multiple") +
ylab("Total Count") +
ylim(0,350) +
labs(fill = "Survived")
# Does survivability depend on where you got onboard the Titanic?
str(data.combined$Embarked)
data.combined$Embarked <- as.factor(data.combined$Embarked)
levels(data.combined$Embarked)
# Plot data for analysis
ggplot(data.combined[1:891,], aes(x = Embarked, fill = Survived)) +
geom_bar() +
facet_wrap(~Pclass + Title) +
ggtitle("Pclass, Title") +
xlab("embarked") +
ylab("Total Count") +
ylim(0,300) +
labs(fill = "Survived")
# From the above analysis we will use the Pclass, Title(Combining Sex and Age), SibSp, Parch and family.size for the exploratory analysis.
#==============================================================================
#
# Video #4 - Exploratory Modeling
#
#==============================================================================
library(tidyverse)
library(caret)
library(randomForest)
ForestTest <- droplevels(data.combined[data.combined$Survived=="None",])
ForestTrain <- droplevels(data.combined[data.combined$Survived!="None",])
ForestTrain <- subset(ForestTrain, select = -c(PassengerId, Name, Sex, Age, ticket.first.char, Ticket, Fare, cabin.first.char, Cabin, Embarked, cabin, cabin.multiple, family.size))
ForestTrain <- na.omit(ForestTrain)
# Split the data into Training and Testing data
set.seed(1234)
training.samples <- ForestTrain$Survived %>% createDataPartition(p = 0.8, list = FALSE)
Train.data <- ForestTrain[training.samples,]
Test.data <- ForestTrain[-training.samples,]
set.seed(1234)
model <- train(Survived~.,data = Train.data, method = "rf",
trControl = trainControl("cv", number = 10),
importance = TRUE)
model$finalModel
